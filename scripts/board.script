go.property("timer", 0)     -- Use to time events
local blocksize = 96        -- Distance between block centers
local edge = 100             -- Left and right edge.
local bottom_edge = 100      -- Bottom edge.
local boardwidth = 9        -- Number of columns
local boardheight = 9       -- Number of rows
day = 1
end_of_game = false
can_click = true
robot_is_moving = false
moving_back = false
explosive_plant_exists = false
repeat_message = "Repeat for each robot or click end turn"
choose_message = "Choose a blue or red highlighted plot to use your item on"
local pathtiles = { 
	{0,1,5,6,7,8},
	{1,3,5},
	{1,2,3,4,5,6,7},
	{1,5,7},
	{1,3,5,7},
	{1,3,7},
	{0,1,2,3,4,5,6,7,8},
	{0,2,4,6},
	{2,6}
}
local plots = { 
	{{x=0,y=1},{x=0,y=2},{x=0,y=3},{x=0,y=4},{x=0,y=5}},
	{{x=2,y=0},{x=2,y=1},{x=3,y=0},{x=4,y=0},{x=4,y=1}},
	{{x=2,y=5},{x=2,y=4},{x=2,y=3},{x=3,y=3},{x=4,y=3},{x=4,y=4},{x=4,y=5},{x=5,y=5},{x=6,y=5},{x=6,y=4},{x=6,y=3}},
	{{x=6,y=1},{x=7,y=1},{x=8,y=1},{x=8,y=2},{x=8,y=3},{x=8,y=4},{x=8,y=5}},
	{{x=0,y=8},{x=1,y=8},{x=1,y=7}},
	{{x=3,y=7},{x=3,y=8},{x=4,y=8},{x=5,y=8},{x=5,y=7}}
}
plots_rewarded_for_pesticide = {}
plots_rewarded_for_steroids = {}
local goodorbadplant = { hash("good-plant-placeholder"), hash("generic_bad_plant")}
local badplantchoices = { hash("poison_plant_placeholder"), hash("electric-plant-placeholder"), hash("explosive_plant_placeholder")} 
turn = "move"
selected_robot_index = 0
max_num_pesticide = 1
max_num_steroids = 1
max_num_fertilizer = 1
num_pesticide = 1
num_steroids = 1
num_fertilizer = 1
in_shed = {true, true, true}
goodplants = {}
badplants = {}
emptyplots = {}
board = {} 
tiles = {}
robots = {}
paths = {}
highlighted_block = {}
enemy_highlighted_blocks = {}
robot_items_left = {}
poison_moving = false
num_bad_guy_moves = 4
bad_guys_doing_turn = {}
max_amount_of_items = 3

function init(self)
	msg.post(".", "acquire_input_focus")
	self.index = 0
	build_board(self)
	prepare_robots(self)
	show_starting_info(self)
end

local function filter(func, tbl)
	local new = {}
	for i, v in pairs(tbl) do
		if func(v) then
			new[i] = v
		end
	end
	return new
end

function update(self, dt)
	for i, robot in ipairs(robots) do
		local actual_robot = robot.id
		local pos = go.get_position(actual_robot)
		local x = math.floor((pos.x - edge) / blocksize)
		local y = math.floor((pos.y - bottom_edge) / blocksize)
		if is_on_shed(self,x,y) then
			msg.post(actual_robot, "hide")
			msg.post(actual_robot, "hide_item")
			in_shed[i] = true
		else
			msg.post(actual_robot, "show")
			msg.post(actual_robot, "show_item")
			in_shed[i] = false
		end
		if robot.stunned then
			robot.can_move = false
		end
	end
	if turn == "move" then
		if is_robot_holding_item(self, hash("stunEffect"), 1) and 
		is_robot_holding_item(self, hash("stunEffect"), 2) and
		is_robot_holding_item(self, hash("stunEffect"), 3) and
		all_robots_are_forever_shocked() then
			lost(self)
		end
	end
	for i, plot in ipairs(plots) do
		local found_bad_plant = false
		local found_good_plant = false
		local all_good_plants = true
		for j, location in ipairs(plot) do
			if not ( board[location.y][location.x].plot_instance == hash("good-plant-placeholder") or board[location.y][location.x].plot_instance == hash("good-plant-steroids-placeholder") ) then
				all_good_plants = false
			else
				found_good_plant = true
			end	
			if is_bad_plant(self, location.x, location.y) then
				found_bad_plant = true
			end
		end
		if not found_bad_plant and found_good_plant and not table_contains(plots_rewarded_for_pesticide, i) then
			table.insert(plots_rewarded_for_pesticide, i)
			max_num_pesticide = max_num_pesticide + 1
			num_pesticide = num_pesticide + 1
		end	
		if all_good_plants and not table_contains(plots_rewarded_for_steroids, i) then
			table.insert(plots_rewarded_for_steroids, i)
			max_num_steroids = max_num_steroids + 1
			num_steroids = num_steroids + 1
		end	
	end	
end

function can_use_item_in_viscinity(self,x,y)
	local pos = go.get_position(robots[selected_robot_index].id)
	local rx = math.floor((pos.x - edge) / blocksize)
	local ry = math.floor((pos.y - bottom_edge) / blocksize)
	local board_positions = {{x=rx,y=ry+1},{x=rx,y=ry-1},{x=rx+1,y=ry},{x=rx-1,y=ry}}
	local can_use_item = false
	for i, position in ipairs(board_positions) do
		if board[position.y] and board[position.y][position.x] and ( can_use_fertilizer(self, position.x, position.y) or 
		can_use_pesticide(self, position.x, position.y) or
		can_use_steroids(self, position.x, position.y) ) then
			can_use_item = true
		end
	end
	return can_use_item
end	

function table_contains(tbl, x)
	found = false
	for _, v in pairs(tbl) do
		if v == x then 
			found = true 
		end
	end
	return found
end

function end_turn(self)
	turn = "enemy_turn"
	can_click = false
	check_if_win_day(self)
	start_enemy_turn(self)
end	

function any_robots_have_item(self, item)
	for i, robot in ipairs(robots) do
		if is_robot_holding_item(self, item, i) then
			return true
		end	
	end
	return false	
end	

function is_block_on_board(self, block)
	for i, tile in ipairs(tiles) do
		if tile.plot_instance == block then
			return true
		end	
	end	
	return false
end	

--
-- Build a list of blocks in 1 dimension for easy filtering
--
local function build_tilelist(self)
	tiles = {}
	goodplants = {}
	badplants = {}
	emptyplots = {}
	for y, l in pairs(board) do
		for x, b in pairs(board[y]) do
			table.insert(tiles, { id = b.id, plot_instance = b.plot_instance, x = b.x, y = b.y })
			if b.plot_instance == hash("good-plant-placeholder") then
				table.insert(goodplants, { id = b.id, plot_instance = b.plot_instance, x = b.x, y = b.y })
			elseif is_bad_plant(self, b.x, b.y) then
				table.insert(badplants, { id = b.id, plot_instance = b.plot_instance, x = b.x, y = b.y })
			elseif b.plot_instance == hash("dirt-placeholder") or 
			b.plot_instance == hash("dirt-poisoned") or 
			b.plot_instance == hash("fertilized-dirt") then
				table.insert(emptyplots, { id = b.id, plot_instance = b.plot_instance, x = b.x, y = b.y })
			end
		end
	end
end
-- 
function on_input(self, action_id, action)
	local x = math.floor((action.x - edge) / blocksize)
	local y = math.floor((action.y - bottom_edge) / blocksize)
	if not action_id and can_click then
		if turn == "move" then
			if selected_robot_index ~= 0 and robots[selected_robot_index].num_item_holding ~= 0 then
				update_highlights(self, x, y)
			end
			if board[y] and board[y][x] then
				if board[y][x].plot_instance == hash("good-plant-placeholder") then
					local l = require "descriptions/good_plant"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("generic_bad_plant") then
					local l = require "descriptions/bad_plant"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("dirt-placeholder") then
					local l = require "descriptions/dirt"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("electric-plant-placeholder") then
					local l = require "descriptions/electric"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("explosive_plant_placeholder") then
					local l = require "descriptions/explosive"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("fertilized-dirt") then
					local l = require "descriptions/fertilized_dirt"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("path-placeholder") then
					local l = require "descriptions/path"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("poison_plant_placeholder") then
					local l = require "descriptions/poison"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("dirt-poisoned") then
					local l = require "descriptions/poisoned_dirt"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("good-plant-steroids-placeholder") then
					local l = require "descriptions/fertilized_plant"
					msg.post("game:/infoGUI", "show_info", {m = l})
				elseif board[y][x].plot_instance == hash("shed_first_version_1") or
				board[y][x].plot_instance == hash("shed_first_version_2") or 
				board[y][x].plot_instance == hash("shed_first_version_3") or 
				board[y][x].plot_instance == hash("shed_first_version_4") then
					local l = require "descriptions/shed"
					msg.post("game:/infoGUI", "show_info", {m = l})
				end
			end
		end
	end
	if action_id == hash("touch") and action.pressed and can_click and robots[selected_robot_index] and robots[selected_robot_index].num_item_holding ~= 0 then
		if turn == "move" then
			if board and board[y] and board[y][x] then
				if (board[y][x].plot_instance == hash("path-placeholder") 
					or is_on_shed(self,x,y))
					and robots[selected_robot_index] 
					and not robots[selected_robot_index].moving then
						move_robot(self, board[y][x], robots[selected_robot_index])
					elseif can_use_pesticide(self,x,y) and is_next_to_plot(self,x,y) then
						update_enemy_turn_indexes(self,x, y)
						update_plots_on_action(self, x, y, "dirt-placeholder")
				elseif can_use_fertilizer(self,x,y) and is_next_to_plot(self,x,y) then
					local texture = nil
					if board[y][x].plot_instance == hash("dirt-placeholder") then
						texture = "fertilized-dirt"
					elseif board[y][x].plot_instance == hash("dirt-poisoned") then
						texture = "dirt-placeholder"
					end
					update_plots_on_action(self, x, y, texture)
				elseif can_use_steroids(self,x,y) and is_next_to_plot(self,x,y) then
					update_plots_on_action(self, x, y, "good-plant-steroids-placeholder")
					for t, pldegood in ipairs(goodplants) do
						if pldegood.id == board[y][x].id then
							table.remove(goodplants,t)
						end
					end
				end
			end	
		end
	end
end

function update_enemy_turn_indexes(self,x,y)
	local index_to_remove = 0
	local index = 0
	for i, idx in ipairs(bad_guys_doing_turn) do 
		for j, bp in ipairs(badplants) do 
			if bp.id == board[y][x].id then
				if idx == j then
					index_to_remove = i
				end
				index = j
			end
		end
	end
	table.remove(badplants,index)
	for i, idx in ipairs(bad_guys_doing_turn) do
		if index ~= 0 and idx > index then
			bad_guys_doing_turn[i] = bad_guys_doing_turn[i] - 1
		end
	end
	--index = index-1
	if bad_guys_doing_turn[index_to_remove] then
		for num, block in ipairs(enemy_highlighted_blocks) do
			if block.id ~= nil and block.x == x and block.y == y then
				go.delete(block.id)
				enemy_highlighted_blocks[num] = {id=nil,x=nil,y=nil,type=nil}
			end
		end	
		table.remove(bad_guys_doing_turn, index_to_remove)
		self.index = self.index - 1
	end
end	

function update_plots_on_action(self, x, y, texture)
	board[y][x].plot_instance = hash(texture)
	go.set(msg.url(nil, board[y][x].id, "tile"), hash("plot_instance"), hash(texture))
	msg.post(board[y][x].id, "play_flipbook", {id = hash(texture)})
	robots[selected_robot_index].can_move = false
	robots[selected_robot_index].num_item_holding = robots[selected_robot_index].num_item_holding - 1
	if not can_use_item_in_viscinity(self, x, y) then
		robots[selected_robot_index].turn_done = true
	end
	if robots[selected_robot_index].num_item_holding == 0 or robots[selected_robot_index].turn_done then
		msg.post(robots[selected_robot_index].id, "remove_item")
		msg.post("game:/infoGUI", "remove_item")
		robots[selected_robot_index].turn_done = true
		robots[selected_robot_index].num_item_holding = 0
		msg.post("game:/infoGUI", "update_round_help", {m = repeat_message})
	else
		msg.post("game:/infoGUI", "update_round_help", {m = choose_message})
	end
	build_tilelist(self)
	delete_highlight(self)
end	

function update_highlights(self, x, y)
	if board and board[y] and board[y][x] and robots[selected_robot_index] then
		p = go.get_position(board[y][x].id)
		if is_bad_plant(self, x, y)
		and is_robot_holding_item(self, "pesticide_placeholder", selected_robot_index) then
			handle_highlight(self, "#plotHighlight", "plot", x, y, p)
		elseif (board[y][x].plot_instance == hash("dirt-placeholder") or board[y][x].plot_instance == hash("dirt-poisoned"))
		and is_robot_holding_item(self, "fertilizer-placeholder", selected_robot_index) then
			handle_highlight(self, "#plotHighlight", "plot", x, y, p)
		elseif board[y][x].plot_instance == hash("good-plant-placeholder")
		and is_robot_holding_item(self, "brassinosteroids-placeholder", selected_robot_index) then
			handle_highlight(self, "#plotHighlight", "plot", x, y, p)
		elseif board[y][x].plot_instance == hash("path-placeholder") then
			if not highlighted_block.id then
				if highlighted_block.id and highlighted_block.type == "plot" then
					delete_highlight(self)
				end
				if robots[selected_robot_index].can_move then
					create_highlight(self, "#pathHighlight", p, "path", x, y)
				end
			elseif not (x == highlighted_block.x) or not (y == highlighted_block.y) then
				delete_highlight(self)
			end
		elseif is_on_shed(self,x,y) then
			if highlighted_block.id then
				delete_highlight(self)
			elseif not highlighted_block.id then
				local shed_dis = edge + (boardwidth-1)*blocksize
				if robots[selected_robot_index].can_move then
					create_highlight(self, "#shedHighlight", vmath.vector3(shed_dis,shed_dis,1), "shed", x, y)
				end
			end
		elseif highlighted_block.id then
			delete_highlight(self)
		end
	elseif highlighted_block.id then
		delete_highlight(self)
	end
end	

function handle_highlight(self, factoryName, type, x, y, p)
	if not highlighted_block.id then 
		if is_next_to_plot(self, x, y) then
			if highlighted_block.id then
				delete_highlight(self)
			end
			create_highlight(self, factoryName, p, type, x, y)
		end
	elseif not (x == highlighted_block.x) or not (y == highlighted_block.y) then
		delete_highlight(self)
	end
end	

function delete_highlight(self)
	if highlighted_block.id ~= nil then
		go.delete(highlighted_block.id)
		highlighted_block = {id=nil,x=nil,y=nil,type=nil}
	end
end

function create_highlight(self, factoryName, p, type, x, y)
	highlighted_block.id = factory.create(factoryName, p)
	highlighted_block.type = type
	highlighted_block.x = x
	highlighted_block.y = y
end

function is_robot_holding_item(self, item, index)
	if index ~= 0 then
		return go.get(msg.url(nil, robots[index].id, "RobotScript"), hash("item")) == hash(item)
	end
	return false
end	

function can_use_pesticide(self,x,y)
	return is_robot_holding_item(self, "pesticide_placeholder", selected_robot_index) and 
	is_bad_plant(self, x, y)
end	

function can_use_fertilizer(self,x,y)
	return is_robot_holding_item(self, "fertilizer-placeholder", selected_robot_index) and 
	(board[y][x].plot_instance == hash("dirt-placeholder") or 
	board[y][x].plot_instance == hash("dirt-poisoned"))
end	

function can_use_steroids(self,x,y)
	return is_robot_holding_item(self, "brassinosteroids-placeholder", selected_robot_index) and 
	(board[y][x].plot_instance == hash("good-plant-placeholder"))
end	

function is_next_to_plot(self,x,y)
	local pos = go.get_position(robots[selected_robot_index].id)
	local rx = math.floor((pos.x - edge) / blocksize)
	local ry = math.floor((pos.y - bottom_edge) / blocksize)
	if ((rx + 1 == x and ry == y) or (rx-1 == x and ry == y) or (ry+1 == y and rx == x) or (ry-1 == y and rx == x)) then
		return true
	end
	return false
end	

local function moved_to_position(robot)
	robot.moving = false
	robot_is_moving = false
	timer.cancel(robot.handle)
	robot.handle = nil
	robot.flip_num = 0
	if not moving_back then
		msg.post("game:/infoGUI", "update_round_help", {m = choose_message})
	end
end

-- function shortest_path(robot, to_tile)
-- 	local startingpos = go.get_position(robot.id)
-- 	local sx = math.floor((startingpos.x - edge) / blocksize)
-- 	local sy = math.floor((startingpos.y - bottom_edge) / blocksize)
-- 	dijkstra(sx, sy, to_tile.x, to_tile.y)
-- 	function minDistance(dist_array, sptsetarray)
-- 		local min = 1000
-- 		local min_index = -1
-- 
-- 		for v = 1, boardwidth do
-- 			if sptsetarray[v] == false and dist_array[v] <= min then
-- 				min = dist_array[v]
-- 				min_index = v
-- 			end
-- 		end
-- 
-- 		return min_index;
-- 	end
-- 	function dijkstra(graph, src)
-- 		local dist = {} 
-- 		local sptSet = {}
-- 		for di = 0, boardwidth do
-- 			table.insert(dist, 1000)
-- 			table.insert(sptSet, false)
-- 		end
-- 		dist[src] = 0
-- 		for count = 0, boardwidth - 1 do
-- 			local u = minDistance(dist, sptSet)
-- 			sptSet[u] = true;
-- 			for v = 0, boardwidth do
-- 				if not sptSet[v] and graph[u][v] ~= 0
-- 				and dist[u] ~= 1000
-- 				and dist[u] + graph[u][v] < dist[v] then
-- 					dist[v] = dist[u] + graph[u][v]
-- 				end
-- 			end
-- 		return dist
-- 	end
-- end	

function move_robot(self, to_tile, robot)
	if robot.can_move and not robot.moving then
		robot_is_moving = true
		robot.moving = true
		robot.handle = timer.delay(.4, true, function() 
			robot.flip_num = robot.flip_num + 1
			msg.post(robot.id, "flip_bot", {bool = (math.fmod(robot.flip_num, 2) == 0)}) 
		end)
		local tile_pos = go.get_position(to_tile.id)
		local pos = vmath.vector3(tile_pos.x, tile_pos.y, .5)
		go.animate(robot.id, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 2, 0, function() moved_to_position(robot) end)
	end
end

function build_board(self)
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local plant
	local numbadplants = 12
	local numgoodplants = 24
	local x = 0
	local y = 0
	for y = 0,boardheight-1 do
		pos.y = bottom_edge + blocksize / 2 + blocksize * y
		board[y] = {}
		for x = 0,boardwidth-1 do
			pos.x = edge + blocksize / 2 + blocksize * x
			pos.z = 0
			if has_value(pathtiles[y+1], x) then
				plant = hash("path-placeholder")
				table.insert(paths, {x = x , y = y})
			elseif x == 7 and y == 8 then
				plant = hash("shed_first_version_1")
			elseif x == 8 and y == 8 then
				plant = hash("shed_first_version_2")
			elseif x == 7 and y == 7 then
				plant = hash("shed_first_version_3")
			elseif x == 8 and y == 7 then
				plant = hash("shed_first_version_4")
			else
				if numbadplants == 0 then
					numgoodplants = numgoodplants-1
					plant = goodorbadplant[1]
				elseif numgoodplants == 0 then
					numbadplants = numbadplants-1
					plant = goodorbadplant[2]
				else
					local gbpi 
					gdpi = math.random(#goodorbadplant)
					if gdpi == 1 then
						numgoodplants = numgoodplants-1
						plant = goodorbadplant[gdpi]
					else 
						numbadplants = numbadplants-1
						plant = goodorbadplant[gdpi]
					end
				end
			end
			local id = factory.create("#tileFactory", pos, null, { plot_instance = plant })
			board[y][x] = { id = id, plot_instance = plant,  x = x, y = y }
			if plant == hash("good-plant-placeholder") then
				table.insert(goodplants, id)
			elseif plant == hash("generic_bad_plant") then
				table.insert(badplants, id)
			end
		end
	end
	build_tilelist(self)
end

function is_bad_plant(self,x,y)
	return (board[y][x].plot_instance == hash("electric-plant-placeholder") or 
	board[y][x].plot_instance == hash("generic_bad_plant") or
	board[y][x].plot_instance == hash("explosive_plant_placeholder") or 
	board[y][x].plot_instance == hash("poison_plant_placeholder"))
end

function is_on_shed(self,x,y)
	return (board[y][x].plot_instance == hash("shed_first_version_1") or 
	board[y][x].plot_instance == hash("shed_first_version_2") or 
	board[y][x].plot_instance == hash("shed_first_version_3") or 
	board[y][x].plot_instance == hash("shed_first_version_4"))
end

function has_value (array, val)
	for index, value in ipairs(array) do
		if value == val then
			return true
		end
	end

	return false
end

function show_day()
	msg.post("game:/infoGUI", "day")
	timer.delay(3.5, false, function(self)
		can_click = true
	end)
end

function show_starting_info(self)
	set_bad_guys_doing_turn()
	highlight_bad_guys()
	show_day()
end

function prepare_robots(self)
	local pos = vmath.vector3(900,900,0)
	local robot_sprites = {hash("robot"), hash("blueRobot"), hash("greenRobot")}
	for i = 1, 3 do 
		robots[i] = {id = factory.create("#robotFactory", pos, null, { sprite = robot_sprites[i], item = hash("none") }), moving = false, in_shed = true, can_move = false, turn_done = false, holding_item = false, stunned = false, handle = nil, flip_num = 0, num_item_holding = 0}
	end
end

function bad_guy_move(self, handle, time_elapsed)
	math.randomseed(os.time())
	local done_with_turns = false
	if poison_moving then
		timer.cancel(handle)
		return
	end	
	self.index = self.index + 1
	if self.index > #bad_guys_doing_turn or done_with_turns then
		timer.cancel(handle)
		msg.post("game:/infoGUI", "darken_screen")
		self.epi = 1
		timer.delay(.6, true, grow_plants_overnight)
		return
	end
	local tile = badplants[bad_guys_doing_turn[self.index]]
	if not tile then
		return
	end	
	if tile.plot_instance == hash("generic_bad_plant") then
		local good = false
		local new_bad_plant = nil
		while not good do
			local index
			local bpcl = #badplantchoices
			index = math.random(bpcl)
			new_bad_plant = badplantchoices[index]
			if not (new_bad_plant == hash("explosive_plant_placeholder") and explosive_plant_exists) then
				good = true
			end
		end	
		if new_bad_plant == hash("explosive_plant_placeholder") then
			explosive_plant_exists = true
		end	
		tile.plot_instance = new_bad_plant
		board[tile.y][tile.x].plot_instance = hash(new_bad_plant)
		msg.post(tile.id, "play_animation", {id = hash(new_bad_plant)})
	elseif tile.plot_instance == hash("poison_plant_placeholder") then
		local gpi
		if #goodplants > 0 then
			local length_of_gp = #goodplants
			gpi = math.random(length_of_gp)
			local goodplant = goodplants[gpi]
			local target_p = go.get_position(goodplant.id)
			create_highlight(self, "#enemyHighlight", target_p, "enemy", goodplant.x, goodplant.y)
			poison_plant_pos = go.get_position(tile.id)
			local poison = {id = factory.create("#poisonFactory", vmath.vector3(poison_plant_pos.x, poison_plant_pos.y, 0))}
			go.animate(poison.id, "position", go.PLAYBACK_ONCE_FORWARD, target_p, go.EASING_LINEAR, 2, 0, function() poison_done_moving(self, poison, goodplant) end)	
			poison_moving = true		
		end
	elseif tile.plot_instance == hash("electric-plant-placeholder") then
		msg.post(tile.id, "show_shock")
		msg.post(tile.id, "rotate_shock")
		timer.delay(.8, false, function(self)
			electric_plant_done(tile, self)
		end)
	elseif tile.plot_instance == hash("explosive_plant_placeholder") then
		msg.post(tile.id, "play_explosion")
		explosive_plant_exists = false
		timer.delay(.5, false, function(self)
			clear_out_plot(self, tile)
		end)
	end
end

function start_enemy_turn(self)
	delete_highlight(self)
	poison_moving = false
	self.index = 0
	check_if_previously_stunned()
	timer.delay(.8, true, bad_guy_move)
end	

function check_if_previously_stunned()
	for y, robot in ipairs(robots) do
		if robot.stunned then
			robot.stunned = false
			msg.post(robot.id, "remove_item")
		end	
	end	
end

function set_bad_guys_doing_turn()
	math.randomseed(os.time())
	local done = false
	local index = 1
	while not done do
		local bpi 
		bpi = math.random(#badplants)
		if not table_contains(bad_guys_doing_turn, bpi) then
			bad_guys_doing_turn[index] = bpi
			index = index + 1		
		end	
		if index > num_bad_guy_moves or #bad_guys_doing_turn == #badplants then
			done = true
		end
	end
end	

function move_robots_back(self)
	moving_back = true
	for i=1,#robots do
		selected_robot_index = i
		if not robots[i].stunned then
			robots[i].can_move = true
			move_robot(self, board[boardheight-1][boardwidth-1], robots[i])
		end
	end
	selected_robot_index = 0
	check_if_win_night(self)
	if not end_of_game then
		next_day(self)
	end
end	
function grow_plants_overnight(self, handle, time_elapsed)
	math.randomseed(os.time())
	if self.epi > #emptyplots or #emptyplots == 0 then
		timer.cancel(handle)
		move_robots_back(self)
		return
	elseif #emptyplots > 0 and not (self.epi > #emptyplots) then
		local empty = emptyplots[self.epi]
		
		if empty.plot_instance == hash("dirt-placeholder") then
			local gbpi 
			gdpi = math.random(#goodorbadplant)
			plant = goodorbadplant[gdpi]
			empty.plot_instance = plant
			board[empty.y][empty.x].plot_instance = plant
			msg.post(board[empty.y][empty.x].id, "play_animation", {id = plant})
		elseif empty.plot_instance == hash("dirt-poisoned") then
			empty.plot_instance = hash("generic_bad_plant")
			board[empty.y][empty.x].plot_instance = hash("generic_bad_plant")
			msg.post(board[empty.y][empty.x].id, "play_animation", {id = hash("generic_bad_plant")})
		elseif empty.plot_instance == hash("fertilized-dirt") then
			empty.plot_instance = hash("good-plant-placeholder")
			board[empty.y][empty.x].plot_instance = hash("good-plant-placeholder")
			msg.post(board[empty.y][empty.x].id, "play_animation", {id = hash("good-plant-placeholder")})
		end
	end
	self.epi = self.epi + 1
end	

function check_if_win_day(self)
	if #badplants < 1 then
		won(self)
	end
end	

function check_if_win_night(self)
	if #goodplants < 1 then
		lost(self)
	elseif #badplants < 1 then
		won(self)
	end	
end	

function won(self)
	can_click = false
	end_of_game = true
	msg.post("game:/infoGUI", "won")
end

function lost(self)
	can_click = false
	end_of_game = true
	msg.post("game:/infoGUI", "lost")
end		

function next_day(self)
	day = day + 1
	set_items()
	for i, robot in ipairs(robots) do
		robot.moving = false
		if not robot.stunned then
			robot.in_shed = true
			robot.can_move = false
			robot.turn_done = false
		else
			robot.in_shed = false
			robot.can_move = false
			robot.turn_done = true
		end
	end	
	show_day()
	build_tilelist(self)
	clear_steroid_plants()
	delete_bad_guy_highlights()
	set_bad_guys_doing_turn()
	highlight_bad_guys()
	msg.post("game:/infoGUI", "clr_color")
	msg.post("game:/infoGUI", "reset_items")
	turn = "move"
end	

function set_items()
	num_pesticide = max_num_pesticide
	num_steroids = max_num_steroids
	num_fertilizer = max_num_fertilizer
	for i, robot in ipairs(robots) do 
		robot.num_item_holding = 0
	end
end	

function highlight_bad_guys()
	for i,num in ipairs(bad_guys_doing_turn) do
		enemy_p = go.get_position(badplants[num].id)
		local enemy_highlighted_block = {}
		enemy_highlighted_block.id = factory.create("#enemyHighlight", enemy_p)
		enemy_highlighted_block.type = "enemy"
		enemy_highlighted_block.x = badplants[num].x
		enemy_highlighted_block.y = badplants[num].y
		table.insert(enemy_highlighted_blocks, enemy_highlighted_block)
	end	
end	

function delete_bad_guy_highlights()
	for num, block in ipairs(enemy_highlighted_blocks) do
		if block.id ~= nil then
			go.delete(block.id)
		end
	end	
	enemy_highlighted_blocks = {}
end	

function clear_steroid_plants()
	for g, deplot in ipairs(tiles) do
		if deplot.plot_instance == hash("good-plant-steroids-placeholder") then
			deplot.plot_instance = hash("good-plant-placeholder")
			board[deplot.y][deplot.x].plot_instance = hash("good-plant-placeholder")
			msg.post(board[deplot.y][deplot.x].id, "play_animation", {id = hash("good-plant-placeholder")})
			table.insert(goodplants, deplot)
		end	
	end	
end	

function poison_done_moving(self, poison, goodplant)
	poison_moving = false
	go.delete(poison.id)
	local idx
	for t, plant in ipairs(goodplants) do
		if plant.id == goodplant.id then
			idx = t
		end
	end
	table.remove(goodplants,idx)
	board[goodplant.y][goodplant.x].plot_instance = hash("dirt-poisoned")
	msg.post(goodplant.id, "play_animation", {id = hash("dirt-poisoned")})
	delete_highlight(self)
	timer.delay(.8, true, bad_guy_move)
end	

function electric_plant_done(tile, self)
	for i, robot in ipairs(robots) do
		if any_robots_in_viscinity(robot, tile) then
			robots[i].stunned = true
			msg.post(robot.id, "switch_item", {item="stunEffect"})
		end
	end
end	

function clear_out_plot(self, tile)
	local clear_plot = false
	for i, plot in ipairs(plots) do
		for j, space in ipairs(plot) do
			if space.x == tile.x and space.y == tile.y then
				clear_plot = true
			end	
		end	
		if clear_plot then
			for k, plot_space in ipairs(plot) do
				if board[plot_space.y][plot_space.x].plot_instance ~= hash("good-plant-steroids-placeholder") then
					for u, bPlant in ipairs(badplants) do
						if bPlant.id == board[plot_space.y][plot_space.x].id then
							update_enemy_turn_indexes(self,plot_space.x, plot_space.y)
							break
						end	
					end	
					for u, gPlant in ipairs(goodplants) do
						if gPlant.id == board[plot_space.y][plot_space.x].id then
							table.remove(goodplants,u)
							break
						end	
					end
					board[plot_space.y][plot_space.x].plot_instance = hash("dirt-placeholder")
					msg.post(board[plot_space.y][plot_space.x].id, "play_animation", {id = hash("dirt-placeholder")})
				end	
			end	
			break
		end	
	end
end	

function any_robots_in_viscinity(robot, tile)
	local pos = go.get_position(robot.id)
	local robx = math.floor((pos.x - edge) / blocksize)
	local roby = math.floor((pos.y - bottom_edge) / blocksize)
	if (robx == tile.x + 1 and roby == tile.y) or 
		(robx == tile.x - 1 and roby == tile.y) or 
		(roby == tile.y + 1 and robx == tile.x) or 
		(roby == tile.y - 1 and robx == tile.x) or
		(roby == tile.y + 1 and robx == tile.x + 1) or
		(roby == tile.y - 1 and robx == tile.x - 1) or
		(roby == tile.y + 1 and robx == tile.x - 1) or
		(roby == tile.y - 1 and robx == tile.x + 1) then
		return true
	end
	return false	
end	

function all_robots_are_forever_shocked()
	local electric_lost = {false, false, false}
	for i, robot in ipairs(robots) do
		local pos = go.get_position(robot.id)
		local robx = math.floor((pos.x - edge) / blocksize)
		local roby = math.floor((pos.y - bottom_edge) / blocksize)
		for j, tile in ipairs(badplants) do
			if( (robx == tile.x + 1 and roby == tile.y) or 
			(robx == tile.x - 1 and roby == tile.y) or 
			(roby == tile.y + 1 and robx == tile.x) or 
			(roby == tile.y - 1 and robx == tile.x) or
			(roby == tile.y + 1 and robx == tile.x + 1) or
			(roby == tile.y - 1 and robx == tile.x - 1) or
			(roby == tile.y + 1 and robx == tile.x - 1) or
			(roby == tile.y - 1 and robx == tile.x + 1) ) and
			tile.plot_instance == hash("electric-plant-placeholder") then
				electric_lost[i] = true
			end
		end
	end
	if electric_lost[1] and electectric_lost[2] and electric_lost[3] then
		lost(self)
	end
end	

function on_message(self, message_id, message, sender)
	if message_id == hash("change_turn") then
		turn = message.turn
	elseif message_id == hash("can_click") then
		can_click = message.bool
	elseif message_id == hash("end_turn") then
		end_turn(self)
	elseif message_id == hash("item_selected") then
		if robots[selected_robot_index] then 
			local robot_x = go.get_position(robots[selected_robot_index].id).x
			local robot_y = go.get_position(robots[selected_robot_index].id).y
			local x = math.floor((robot_x - edge) / blocksize)
			local y = math.floor((robot_y - bottom_edge) / blocksize)
			if is_on_shed(self, x, y) then
				msg.post(robots[selected_robot_index].id, "switch_item", {item=message.item})
			end
		end
	elseif message_id == hash("remove_item") then
		if robots[selected_robot_index] then 
			local robot_x = go.get_position(robots[selected_robot_index].id).x
			local robot_y = go.get_position(robots[selected_robot_index].id).y
			local x = math.floor((robot_x - edge) / blocksize)
			local y = math.floor((robot_y - bottom_edge) / blocksize)
			if is_on_shed(self, x, y) then
				msg.post(robots[selected_robot_index].id, "remove_item")
			end
		end
	end
end
