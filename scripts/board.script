go.property("timer", 0)     -- Use to time events
local blocksize = 96        -- Distance between block centers
local edge = 100             -- Left and right edge.
local bottom_edge = 100      -- Bottom edge.
local boardwidth = 9        -- Number of columns
local boardheight = 9       -- Number of rows
local pathtiles = { 
	{0,1,5,6,7,8},
	{1,3,5},
	{1,2,3,4,5,6,7},
	{1,5,7},
	{1,3,5,7},
	{1,3,7},
	{0,1,2,3,4,5,6,7,8},
	{0,2,4,6},
	{2,6}
}
local goodorbadplant = { hash("good-plant-placeholder"), hash("generic_bad_plant")}
local turn = "move"

local function filter(func, tbl)
	local new = {}
	for i, v in pairs(tbl) do
		if func(v) then
			new[i] = v
		end
	end
	return new
end

-- function update(self, dt)
-- 	
-- end

--
-- Build a list of blocks in 1 dimension for easy filtering
--
local function build_tilelist(self)
	self.tiles = {}
	for y, l in pairs(self.board) do
		for x, b in pairs(self.board[y]) do
			table.insert(self.tiles, { id = b.id, plot_instance = b.plot_instance, x = b.x, y = b.y })
		end
	end
end

function on_input(self, action_id, action)
	local x = math.floor((action.x - edge) / blocksize)
	local y = math.floor((action.y - bottom_edge) / blocksize)
	if not action_id and self.board and self.board[y] and self.board[y][x] then
		if turn == "select_item" then
		elseif turn == "move" then
			if self.board[y][x].plot_instance == hash("path-placeholder") then
				p = go.get_position(self.board[y][x].id)
				if not self.highlighted_block.id then
					self.highlighted_block.id = factory.create("#connectorFactory", p)
					self.highlighted_block.x = x
					self.highlighted_block.y = y
				elseif not (x == self.highlighted_block.x) or not (y == self.highlighted_block.y) then
					go.delete(self.highlighted_block.id)
					self.highlighted_block = {id=nil,x=nil,y=nil}
 				end
			end
		elseif turn == "select_plant" then
		end
	end
	if action_id == hash("touch") then
	end
end

function init(self)
	self.board = {}             -- Contains the board structure
	self.blocks = {}            -- List of all blocks. Used for easy filtering on selection.
	self.robots = {}
	self.goodplants = {}
	self.badplants = {}
	self.emptyplots = {}
	self.highlighted_block = {}
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")
end

local function build_board(self)
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local plant
	local numbadplants = 14
	local numgoodplants = 28
	local x = 0
	local y = 0
	for y = 0,boardheight-1 do
		pos.y = bottom_edge + blocksize / 2 + blocksize * y
		self.board[y] = {}
		for x = 0,boardwidth-1 do
			pos.x = edge + blocksize / 2 + blocksize * x
			pos.z = 0
			if has_value(pathtiles[y+1], x) then
				plant = hash("path-placeholder")
			elseif x == 7 and y == 8 then
				plant = hash("shed_first_version_1")
			elseif x == 8 and y == 8 then
				plant = hash("shed_first_version_2")
			elseif x == 7 and y == 7 then
				plant = hash("shed_first_version_3")
			elseif x == 8 and y == 7 then
				plant = hash("shed_first_version_4")
			else
				if numbadplants == 0 then
					numgoodplants = numgoodplants-1
					plant = goodorbadplant[1]
				elseif numgoodplants == 0 then
					numbadplants = numbadplants-1
					plant = goodorbadplant[2]
				else
					local gbpi 
					gdpi = math.random(#goodorbadplant)
					if gdpi == 1 then
						numgoodplants = numgoodplants-1
						plant = goodorbadplant[gdpi]
					else 
						numbadplants = numbadplants-1
						plant = goodorbadplant[gdpi]
					end
				end
			end
			local id = factory.create("#tileFactory", pos, null, { plot_instance = plant })
			self.board[y][x] = { id = id, plot_instance = plant,  x = x, y = y }
			if plant == hash("good-plant-placeholder") then
				table.insert(self.goodplants, id)
			elseif plant == hash("generic_bad_plant") then
				table.insert(self.badplants, id)
			end
		end
	end

	-- Build 1d list that we can easily filter.
	build_tilelist(self)
end

function has_value (array, val)
	for index, value in ipairs(array) do
		if value == val then
			return true
		end
	end

	return false
end

function show_starting_info(self)
	
end

function prepare_robots(self)
	local pos = vmath.vector3(900,900,0)
	self.robots[1] = {id = factory.create("#robotFactory", pos, null, { sprite = hash("robot"), item = nil })}
	self.robots[2] = {id = factory.create("#robotFactory", pos, null, { sprite = hash("robot"), item = nil })}
	self.robots[3] = {id = factory.create("#robotFactory", pos, null, { sprite = hash("robot"), item = nil })}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("change_turn") then
		turn = message.turn
	elseif message_id == hash("delete main menu") then
		go.delete("main_menu")
		build_board(self)
		prepare_robots(self)
		
		show_starting_info(self)
	end
end
