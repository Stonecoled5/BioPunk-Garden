local pause_clicked = false
local select_item_text = "Select an item for that robot to carry."
function init(self)
	msg.post(".", "acquire_input_focus")
	clear_color()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	gui.set_text(gui.get_node("item1amount"),"x" .. num_pesticide)
	gui.set_text(gui.get_node("item2amount"),"x" .. num_steroids)
	gui.set_text(gui.get_node("item3amount"),"x" .. num_fertilizer)
	gui.set_text(gui.get_node("numBadPlants"),"Bad Plants: " .. #badplants)
	gui.set_text(gui.get_node("numGoodPlants"),"Good Plants: " .. #goodplants)
end

local function anim2(self, node)
	gui.animate(gui.get_node("largeDayCount"), gui.PROP_POSITION, vmath.vector3(2200,540,1), gui.EASING_LINEAR, .7)
end

local function anim1(self, node)
	gui.animate(gui.get_node("largeDayCount"), gui.PROP_POSITION, vmath.vector3(1100,540,1), gui.EASING_LINEAR, 2, 0, anim2)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("day") then
		can_click = false
		gui.set_alpha(gui.get_node("black_screen"), .5)
		timer.delay(3.5, false, function(self)
			gui.set_alpha(gui.get_node("black_screen"), 0)
			can_click = true
			moving_back = false
		end)
		gui.set_text(gui.get_node("round_help"), "Choose a robot on the right")
		gui.set_text(gui.get_node("largeDayCount"),"Day " .. day)
		gui.set_position(gui.get_node("largeDayCount"), vmath.vector3(-200,540,1))
		gui.animate(gui.get_node("largeDayCount"), gui.PROP_POSITION, vmath.vector3(900,540,1), gui.EASING_LINEAR, .7, 0,anim1)
		gui.set_text(gui.get_node("dayCount"), "Day " .. day)
	elseif message_id == hash("remove_item") then
		gui.set_alpha(gui.get_node("robot" .. selected_robot_index .. "item"), 0)
		gui.set_enabled(gui.get_node("undoRobotItem" .. selected_robot_index), false)
	elseif message_id == hash("darken_screen") then
		gui.set_alpha(gui.get_node("black_screen"), .5)
		
	elseif message_id == hash("lighten_screen") then
		gui.set_alpha(gui.get_node("black_screen"), 0)
	elseif message_id == hash("won") then
		gui.set_alpha(gui.get_node("black_screen"), .5)
		gui.set_alpha(gui.get_node("won"), 1)
		gui.set_enabled(gui.get_node("won_box"), true)
		gui.set_enabled(gui.get_node("main_menu_button"), true)
		gui.set_alpha(gui.get_node("main_menu"), 1)
		gui.set_alpha(gui.get_node("won_message"), 1)
	elseif message_id == hash("lost") then
		gui.set_alpha(gui.get_node("black_screen"), .5)
		gui.set_alpha(gui.get_node("lost"), 1)
		gui.set_enabled(gui.get_node("lost_box"), true)
		gui.set_enabled(gui.get_node("main_menu_button"), true)
		gui.set_alpha(gui.get_node("main_menu"), 1)
		gui.set_alpha(gui.get_node("lost_message"), 1)
	elseif message_id == hash("clr_color") then
		clear_color()
	elseif message_id == hash("reset_items") then
		reset_items()
	elseif message_id == hash("show_info") then
		gui.set_alpha(gui.get_node("info"), 1)
		gui.set_text(gui.get_node("info"), message.m.info)
		gui.set_enabled(gui.get_node("pic"), true)
		gui.set_texture(gui.get_node("pic"), "main")
		gui.play_flipbook(gui.get_node("pic") ,message.m.pic)
	elseif message_id == hash("hide_info") then
		gui.set_alpha(gui.get_node("info"), 0)
		gui.set_enabled(gui.get_node("pic"), false)
	elseif message_id == hash("update_round_help") then
		gui.set_text(gui.get_node("round_help"), message.m)
	end
end

function clear_color()
	gui.set_color(gui.get_node("robot1Border"), vmath.vector3(0,0,0))
	gui.set_color(gui.get_node("robot2Border"), vmath.vector3(0,0,0))
	gui.set_color(gui.get_node("robot3Border"), vmath.vector3(0,0,0))
end	

function reset_items()
	gui.set_enabled(gui.get_node("undoRobotItem1"), false)
	gui.set_enabled(gui.get_node("undoRobotItem2"), false)
	gui.set_enabled(gui.get_node("undoRobotItem3"), false)
	gui.set_alpha(gui.get_node("robot1item"),0)
	gui.set_alpha(gui.get_node("robot2item"),0)
	gui.set_alpha(gui.get_node("robot3item"),0)
end	

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then 
		if can_click then
			local robot_item = "robot" .. selected_robot_index .. "item"
			local undo_button = "undoRobotItem" .. selected_robot_index
			local n = nil
			local nundo = nil
			if not (selected_robot_index == 0) then
				n = gui.get_node(robot_item)
				nundo = gui.get_node(undo_button)
			end
			if gui.pick_node(gui.get_node("pause"), action.x, action.y) then
				can_click = false
				pause_clicked = true
				msg.post("game:/board", "can_click", {bool=false})
				gui.set_alpha(gui.get_node("black_screen"), .5)
				gui.set_enabled(gui.get_node("main_menu_button"), true)
				gui.set_enabled(gui.get_node("continue_button"), true)
				gui.set_alpha(gui.get_node("main_menu"), 1)
				gui.set_alpha(gui.get_node("continue"), 1)
			elseif gui.pick_node(gui.get_node("robot1Border"), action.x, action.y) then
				selected_robot_index = 1
				clear_color()
				gui.set_text(gui.get_node("round_help"), select_item_text)
				gui.set_color(gui.get_node("robot1Border"), vmath.vector3(1,1,1))
			elseif gui.pick_node(gui.get_node("robot2Border"), action.x, action.y) then
				selected_robot_index = 2
				clear_color()
				gui.set_text(gui.get_node("round_help"), select_item_text)
				gui.set_color(gui.get_node("robot2Border"), vmath.vector3(1,1,1))
			elseif gui.pick_node(gui.get_node("robot3Border"), action.x, action.y) then
				selected_robot_index = 3
				clear_color()
				gui.set_text(gui.get_node("round_help"), select_item_text)
				gui.set_color(gui.get_node("robot3Border"), vmath.vector3(1,1,1))
			elseif n and gui.is_enabled(n) and gui.pick_node(gui.get_node("item1"), action.x, action.y) and 
			not (selected_robot_index == 0) and 
			in_shed[selected_robot_index] and
			num_pesticide > 0 then
				set_robot_texture(n, nundo, "pesticide_placeholder")
			elseif n and gui.is_enabled(n) and gui.pick_node(gui.get_node("item2"), action.x, action.y) and 
			not (selected_robot_index == 0) and 
			in_shed[selected_robot_index] and
			num_steroids > 0 then
				set_robot_texture(n, nundo, "brassinosteroids-placeholder")
			elseif n and gui.is_enabled(n) and gui.pick_node(gui.get_node("item3"), action.x, action.y) and 
			not (selected_robot_index == 0) and 
			in_shed[selected_robot_index] and
			num_fertilizer > 0 then
				set_robot_texture(n, nundo, "fertilizer-placeholder")
			elseif nundo and gui.is_enabled(nundo) and gui.pick_node(nundo, action.x, action.y) and 
			not (selected_robot_index == 0) and 
			in_shed[selected_robot_index] then
				undo_robot_texture(n, nundo)
			elseif gui.pick_node(gui.get_node("end_turn_box"), action.x, action.y) then
				msg.post("game:/board", "end_turn")
			end
		elseif not can_click and (pause_clicked or end_of_game) then
			if gui.pick_node(gui.get_node("main_menu_button"), action.x, action.y) then
				msg.post("main:/controller", "show_menu")
			elseif gui.is_enabled(gui.get_node("continue_button")) and gui.pick_node(gui.get_node("continue_button"), action.x, action.y) then
				can_click = true
				pause_clicked = false
				msg.post("game:/board", "can_click", {bool=true})
				gui.set_alpha(gui.get_node("black_screen"), 0)
				gui.set_enabled(gui.get_node("main_menu_button"), false)
				gui.set_enabled(gui.get_node("continue_button"), false)
				gui.set_alpha(gui.get_node("main_menu"), 0)
				gui.set_alpha(gui.get_node("continue"), 0)
			end
		end
	end
end

function set_robot_texture(n, nundo, item)
	msg.post("game:/board", "item_selected", {item = item})
	if item == "pesticide_placeholder" then
		replace_item_count(n)
		num_pesticide = num_pesticide - 1
	elseif item == "brassinosteroids-placeholder" then
		replace_item_count(n)
		num_steroids = num_steroids - 1
	elseif item == "fertilizer-placeholder" then
		replace_item_count(n)
		num_fertilizer = num_fertilizer - 1
	end	
	robots[selected_robot_index].holding_item = true
	robots[selected_robot_index].can_move = true
	gui.set_text(gui.get_node("round_help"), "Choose a path space for the robot to go to")
	gui.set_enabled(n, true)
	gui.set_enabled(nundo, true)
	gui.set_texture(n, "main")
	gui.play_flipbook(n, item)
	gui.set_alpha(n, 1)
end

function replace_item_count(n)
	if gui.get_flipbook(n) == hash("brassinosteroids-placeholder") and num_steroids < max_num_steroids then
		num_steroids = num_steroids + 1
	elseif gui.get_flipbook(n) == hash("fertilizer-placeholder") and num_fertilizer < max_num_fertilizer then
		num_fertilizer = num_fertilizer + 1
	elseif gui.get_flipbook(n) == hash("pesticide_placeholder") and num_pesticide < max_num_pesticide then
		num_pesticide = num_pesticide + 1
	end	
end	

function undo_robot_texture(n, nundo)
	if gui.get_flipbook(n) == hash("pesticide_placeholder") then
		num_pesticide = num_pesticide + 1
	elseif gui.get_flipbook(n) == hash("brassinosteroids-placeholder") then
		num_steroids = num_steroids + 1
	elseif gui.get_flipbook(n) == hash("fertilizer-placeholder") then
		num_fertilizer = num_fertilizer + 1
	end	
	msg.post("game:/board", "remove_item")
	gui.set_enabled(nundo, false)
	gui.set_alpha(n, 0)
	robots[selected_robot_index].holding_item = false
	robots[selected_robot_index].can_move = false
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
