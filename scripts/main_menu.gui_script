-- file: menu.gui_script

-- the functions animX represents the animation time-line
-- first is anim1 executed, when finished anim2 is executed, etc
-- anim1 to anim4 creates a bouncing rubber effect.
-- anim5 fades down alpha and is only used for the background

-- local function anim5(self, node)
-- 	if gui.get_node("background") == node then
-- 		-- special case for background. animate alpha to 60%
-- 		local to_color = gui.get_color(node)
-- 		to_color.w = 0.6
-- 		gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_OUT, 1.2, 0.1)
-- 	end
-- end
local function anim4(self, node)
	-- animate scale to 100%
	local s = 1
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUT, 0.12, 0, nil)
end

local function anim3(self, node)
	-- animate scale to 106%
	local s = 1.06
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUT, 0.12, 0, anim4)
end

local function anim2(self, node)
	-- animate scale to 98%
	local s = 0.98
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUT, 0.12, 0, anim3)
end

local function anim1(node, d, scale)

	start_scale = 0.7
	gui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))
	-- get current color and set alpha to 0 to fade up
	local from_color = gui.get_color(node)
	local to_color = gui.get_color(node)
	from_color.w = 0
	gui.set_color(node, from_color)

	-- animate alpha value from 0 to 1
	gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_IN, 0.2, d)

	-- animate scale from %70 to 110%
	local s = 1.1
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_IN, 0.2, d, anim2)
end

function init(self)
	defos.disable_window_resize()
	-- start animations for all nodes
	-- background, button-boxes and text are animated equally
	-- d is the animation start delay
	local d = 0.4
	anim1(gui.get_node("new_game"), d)
	anim1(gui.get_node("new_game_button_shadow"), d)
	anim1(gui.get_node("new_game_button"), d)

	d = 0.3
	anim1(gui.get_node("quit"), d)
	anim1(gui.get_node("quit_button_shadow"), d)
	anim1(gui.get_node("quit_button"), d)
	msg.post(".", "acquire_input_focus")
end

function on_input(self, action_id, action)
	local yellow = vmath.vector3(1,1,0)
	local white = vmath.vector3(1,1,1)
	if not action_id then
		if gui.pick_node(gui.get_node("new_game_button"), action.x, action.y) then
			gui.set_color(gui.get_node("new_game"), yellow)
		elseif gui.pick_node(gui.get_node("quit_button"), action.x, action.y) then
			gui.set_color(gui.get_node("quit"), yellow)
		else
			gui.set_color(gui.get_node("new_game"), white)
			gui.set_color(gui.get_node("quit"), white)
		end	
	end
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("new_game_button"), action.x, action.y) then
			gui.set_text(gui.get_node("new_game"), "Continue")
			msg.post("main:/controller", "show_game")
		elseif gui.pick_node(gui.get_node("quit_button"), action.x, action.y) then
			msg.post("@system:", "exit", {code = 0})
		elseif gui.pick_node(gui.get_node("close"), action.x, action.y) then
			disable_menu()
		end
	end
end

	